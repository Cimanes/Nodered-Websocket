[
    {
        "id": "3dac80766e61d74c",
        "type": "tab",
        "label": "BME Websocket",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "dd09abb205df0e7f",
        "type": "group",
        "z": "3dac80766e61d74c",
        "name": "BME Readings",
        "style": {
            "label": true,
            "color": "#a4a4a4",
            "fill": "#000000",
            "stroke": "#7f7f7f"
        },
        "nodes": [
            "3de7f87250c169e2",
            "cc3002e58ce69bc3",
            "d948828048902b18",
            "319aac19b602f4f7",
            "bd9c489eca802592",
            "6db98c8dd04fb2cc",
            "e00612e76fa3ef4c",
            "0f3e635564d267e5",
            "2ce0dede2ca80f70",
            "493137d83331c9f8",
            "b24a5815257570f5",
            "bc3546db21834208",
            "7f9e9fa6bcde4996",
            "627caa1b5cd3dd83",
            "508756cca5495592",
            "70c8b7a389fb0976",
            "60a2aa154f0978cd",
            "3c532dca89ba976c",
            "3661b3b2867449f4",
            "9ff97d9239fe7f76",
            "bc82cd87126c5652",
            "5392cf50f92bb64b",
            "e856bdde1ed1290b",
            "80f5bfca25f4a9f5",
            "42de5b23f94e16ae",
            "8de8cb3c28cee10d",
            "44d7fdee5b46f265",
            "5d1ae5a93dee578b"
        ],
        "x": 14,
        "y": 599,
        "w": 932,
        "h": 402
    },
    {
        "id": "6667f11d73617129",
        "type": "group",
        "z": "3dac80766e61d74c",
        "name": "Console (Thermostat & ESP Commands)",
        "style": {
            "label": true,
            "color": "#a4a4a4",
            "fill": "#000000",
            "stroke": "#7f7f7f"
        },
        "nodes": [
            "ad3e1c6852897a8a",
            "b4db417f9850d602",
            "9f71bf27125dbd78",
            "3a49dc07585c056f",
            "f6afd5faaddec587",
            "ba91eba864a7bdcd",
            "2ca24d054e1a9b71",
            "083c1a1ef84bf663",
            "7cda15e74b3a94a7",
            "5d2a53e5d53ca1a5",
            "ac1bc8ff4525237d",
            "b1979aac4e95b2af",
            "d88741462fe5a579",
            "c515b74f012a3803",
            "6c7e6c2fc8ab58cd",
            "819a7b810339db92",
            "f86406eb7d3704a1",
            "ed9ae5b74626bf48",
            "0ea18f2f79bcf3c8",
            "5ca63a5b5666aedf",
            "c5c4d7b6ec196e16",
            "f8c0702143969d9f",
            "a4dd09075453160a",
            "cd50e58b871af65f",
            "cbf5c5d18570a5f2",
            "6b62d61d692b112a",
            "c84973a3cc806c76"
        ],
        "x": 14,
        "y": 19,
        "w": 932,
        "h": 562
    },
    {
        "id": "0d83be325c5fd20f",
        "type": "group",
        "z": "3dac80766e61d74c",
        "name": "Console (ESP Feedback)",
        "style": {
            "label": true,
            "color": "#a4a4a4",
            "fill": "#000000",
            "stroke": "#7f7f7f"
        },
        "nodes": [
            "38145cf2896c124a",
            "9afab28deb3c948f",
            "19bfa9706260c834",
            "25109779614fcc36",
            "1e34c19d468c41e9",
            "98c480a603ae64ac",
            "952dc4b717bf2124",
            "d46901a0d2fab6f9",
            "c2dcf9fe2882c26c",
            "107dbd27acb366e1",
            "0cdd99357493f9f5",
            "a7d7c4eef88baee1",
            "7f9e7b9d208fc266",
            "409fab1c6bf3bd97",
            "725be293e416a567",
            "be4ceccd9cb5c6c7",
            "156db787f766f496",
            "3ebd4c01fc21de41",
            "2c2c19fb7f3e2120",
            "fb4745b8a6fa5966",
            "55f6fda16ba96217",
            "c05b554813adb4a2"
        ],
        "x": 14,
        "y": 1019,
        "w": 932,
        "h": 442
    },
    {
        "id": "42de5b23f94e16ae",
        "type": "junction",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "x": 580,
        "y": 680,
        "wires": [
            [
                "bd9c489eca802592",
                "2ce0dede2ca80f70"
            ]
        ]
    },
    {
        "id": "3de7f87250c169e2",
        "type": "websocket in",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "ESP --> /ws",
        "server": "8dbef215b4efa8a7",
        "client": "",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "e00612e76fa3ef4c",
                "3c532dca89ba976c",
                "bc82cd87126c5652"
            ]
        ]
    },
    {
        "id": "ad3e1c6852897a8a",
        "type": "websocket out",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "/ws  --> BME",
        "server": "8dbef215b4efa8a7",
        "client": "",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "cc3002e58ce69bc3",
        "type": "comment",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Description",
        "info": " 1. ### Receive websocket msg from ESP.\n 2. ### Filter the data:\n    - BME Readings\n    - BME health \n    - ESP feedback --> Console\n 3. ### Process and distribute message\n    - assign topic and scale BME readings\n    - send ESP Feedback to Console block\n 4. ### Display received message\n    - BME current - gauge\n    - BME historic - chart\n 5. ### User input: BME interval\n 6. ### User input: Trigger BME reading",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "d948828048902b18",
        "type": "ui-chart",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "5532451b39d92101",
        "name": "Chart Hum",
        "label": "BME - Rel. Humidity (%)",
        "order": 1,
        "chartType": "line",
        "category": "hum",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "10",
        "ymax": "90",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "240",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "1000",
        "colors": [
            "#008700",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 690,
        "y": 720,
        "wires": [
            [
                "6db98c8dd04fb2cc"
            ]
        ]
    },
    {
        "id": "319aac19b602f4f7",
        "type": "ui-chart",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "08f2c61ccabaf911",
        "name": "Chart SLP",
        "label": "Sea Level Pressure (mbar)",
        "order": 1,
        "chartType": "line",
        "category": "pres",
        "categoryType": "str",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "980",
        "ymax": "1040",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": 4,
        "showLegend": true,
        "removeOlder": "240",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "1000",
        "colors": [
            "#0a5a78",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 690,
        "y": 760,
        "wires": [
            [
                "70c8b7a389fb0976"
            ]
        ]
    },
    {
        "id": "bd9c489eca802592",
        "type": "ui-gauge",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Gauge Temp",
        "group": "37492f9f10e66ef3",
        "order": 4,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Temp.",
        "units": "ÂºC",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "5",
                "color": "#7ae4ff"
            },
            {
                "from": "19",
                "color": "#08a612"
            },
            {
                "from": "26",
                "color": "#cd3c32"
            }
        ],
        "min": "5",
        "max": "35",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 680,
        "wires": []
    },
    {
        "id": "6db98c8dd04fb2cc",
        "type": "ui-gauge",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Gauge Hum",
        "group": "37492f9f10e66ef3",
        "order": 6,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "Hum.",
        "units": "%",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "0",
                "color": "#cd3c32"
            },
            {
                "from": "40",
                "color": "#08a612"
            },
            {
                "from": "65",
                "color": "#7ae4ff"
            }
        ],
        "min": "0",
        "max": "100",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 720,
        "wires": []
    },
    {
        "id": "b4db417f9850d602",
        "type": "ui-switch",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "debug",
        "label": "Debug",
        "group": "ccd177e6e1aae92d",
        "order": 2,
        "width": 3,
        "height": 0,
        "passthru": true,
        "decouple": false,
        "topic": "debug",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-left",
        "clickableArea": "switch",
        "onvalue": "1",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 350,
        "y": 320,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "9f71bf27125dbd78",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "ccd177e6e1aae92d",
        "name": "reboot ESP",
        "label": "Reboot ESP",
        "order": 4,
        "width": 3,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "button_red",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "num",
        "topic": "reboot",
        "topicType": "str",
        "buttonColor": "rgb(100,0,0)",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 180,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "3a49dc07585c056f",
        "type": "ui-slider",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "2bee51758a9ad534",
        "name": "Thermostat",
        "label": "Thermostat: ",
        "tooltip": "",
        "order": 5,
        "width": 5,
        "height": 0,
        "passthru": true,
        "outs": "end",
        "topic": "thermostat",
        "topicType": "str",
        "thumbLabel": "true",
        "showTicks": "true",
        "min": "35",
        "max": "5",
        "step": "0.5",
        "className": "",
        "iconPrepend": "minus",
        "iconAppend": "plus",
        "color": "",
        "colorTrack": "",
        "colorThumb": "",
        "showTextField": true,
        "x": 370,
        "y": 520,
        "wires": [
            [
                "ba91eba864a7bdcd"
            ]
        ]
    },
    {
        "id": "f6afd5faaddec587",
        "type": "comment",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Description",
        "info": "1. ### Process user inputs\n    -  Thermostat deadband -> create context variable\n    -  Thermostat control -> evaluate heater required\n    -  GPIO controls -> \"0\" / \"1\"\n    -  Reboot ESP / Reset Wifi credentials / OTA upgrade commands\n    -  BME trigger new reading\n2. ### Clean message (keep topic & payload only)\n3. ### Send message to ESP via websocket\n4. ### Show IP addresses\n    - Get IP address from ESP (ws client)\n    - Node-red IP address (ws server)",
        "x": 100,
        "y": 60,
        "wires": []
    },
    {
        "id": "b24a5815257570f5",
        "type": "ui-number-input",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "37492f9f10e66ef3",
        "name": "interval",
        "label": "BME interval",
        "order": 8,
        "width": 3,
        "height": 0,
        "topic": "interval",
        "topicType": "str",
        "min": "10",
        "max": "36000",
        "step": "5",
        "tooltip": "seconds between BME readings",
        "passthru": true,
        "sendOnBlur": false,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "bc3546db21834208"
            ]
        ]
    },
    {
        "id": "ba91eba864a7bdcd",
        "type": "function",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Heater",
        "func": "// The msg received can be ot the types:\n//  {\"payload\": 20, \"topic\": \"thermostat\"}\n//  {\"payload\": 0.3, \"topic\": \"deadband\"}\n//  {\"payload\": 21.4, \"topic\": \"temp\"}\n// The topic is the name of the flow-scoped variable.\n// The payload is the new value for that variable\n\n// Update the received variable (\"deadband\" / \"temp\" / \"thermostat\") in the context scope: :\ncontext.set(msg.topic, msg.payload);\n\n// Calculate the heater output and assign it to msg.payload\nconst T = context.get(\"temp\"),\n    DB = context.get(\"deadband\"),\n    Setpoint = context.get(\"thermostat\"),\n    Heater = Setpoint > T + DB ? 1 : 0,\n    HeaterChart = 4 * (Heater + .1);   // -> 0.4 (off) or 4.4 (on) in chart\n\n// If \"heater\" changes, update context and send to websocket (output 1)\nif (context.get(\"heater\") !== Heater) { \n    context.set(\"heater\", Heater); \n    return [\n        { topic: \"gpio/heater\", payload: Heater      },\n        { topic: \"Heater\",      payload: HeaterChart },\n        { topic: \"Setpoint\",    payload: Setpoint    },\n        { topic: \"Temp\",        payload: T,          }\n    ]\n};\n\n// Only deadband changed, no output.\nif(msg.topic == \"deadband\") return;\n\n// No change in heater state â only send remaining outputs\nreturn [\n    null,\n    { topic: \"Heater\", payload: HeaterChart },\n    { topic: \"Setpoint\", payload: Setpoint },\n    { topic: \"Temp\", payload: T, }\n];\n",
        "outputs": 4,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 480,
        "wires": [
            [
                "6b62d61d692b112a"
            ],
            [
                "c84973a3cc806c76"
            ],
            [
                "c84973a3cc806c76"
            ],
            [
                "c84973a3cc806c76"
            ]
        ]
    },
    {
        "id": "2ca24d054e1a9b71",
        "type": "ui-number-input",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "2bee51758a9ad534",
        "name": "Deadband",
        "label": "Deadband",
        "order": 7,
        "width": 2,
        "height": 0,
        "topic": "deadband",
        "topicType": "str",
        "min": "0.1",
        "max": "1",
        "step": "0.1",
        "tooltip": "Temp. Deadband",
        "passthru": true,
        "sendOnBlur": false,
        "sendOnEnter": true,
        "className": "",
        "clearable": true,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "stacked",
        "x": 370,
        "y": 480,
        "wires": [
            [
                "ba91eba864a7bdcd"
            ]
        ]
    },
    {
        "id": "083c1a1ef84bf663",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init Deadband",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "0.2",
        "payloadType": "num",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "2ca24d054e1a9b71"
            ]
        ]
    },
    {
        "id": "7cda15e74b3a94a7",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init Thermostat",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "3a49dc07585c056f"
            ]
        ]
    },
    {
        "id": "493137d83331c9f8",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Init Interval",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "900",
        "payloadType": "num",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "b24a5815257570f5"
            ]
        ]
    },
    {
        "id": "5d2a53e5d53ca1a5",
        "type": "ui-switch",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "boiler",
        "label": "Boiler",
        "group": "2bee51758a9ad534",
        "order": 2,
        "width": 3,
        "height": 0,
        "passthru": true,
        "decouple": false,
        "topic": "gpio/boiler",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-left",
        "clickableArea": "switch",
        "onvalue": "1",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "0",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 350,
        "y": 260,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "ac1bc8ff4525237d",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init. Boiler",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "0",
        "payloadType": "str",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "5d2a53e5d53ca1a5"
            ]
        ]
    },
    {
        "id": "e00612e76fa3ef4c",
        "type": "function",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Filter",
        "func": "msg._session = \"\";\nif (!msg.topic) { return [msg, null]; } \nelse { return [null, msg]; }\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 860,
        "wires": [
            [
                "3661b3b2867449f4"
            ],
            [
                "9ff97d9239fe7f76"
            ]
        ]
    },
    {
        "id": "38145cf2896c124a",
        "type": "function",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "0d83be325c5fd20f",
        "name": "Get GPIO Fdback",
        "func": "const topicMap = {\n    wifi: 0,\n    interval: 1,\n    boiler: 2,\n    debug: 3,\n    led: 4,\n    heater: 5,\n    espIP: 6,\n    \"\": 7\n};\n\nlet result = Array(8).fill(null);\nif (topicMap.hasOwnProperty(msg.topic)) {\n    result[topicMap[msg.topic]] = msg;\n}\nreturn result;\n\n\n// let result = Array(8).fill(null);\n// switch (msg.topic) {\n//     case \"interval\":    result[0] = msg; break;\n//     case \"heater\":      result[1] = msg; break;\n//     case \"boiler\":      result[2] = msg; break;\n//     case \"debug\":       result[3] = msg; break;\n//     case \"led\":         result[4] = msg; break;\n//     case \"espIP\":       result[5] = msg; break;\n//     case \"wifi\":        result[6] = msg;\n//         msg.payload = '<div style=\"color: #065f46; background-color: #2e2; padding: 2rem; border-radius: 0.375rem;\">â Wifi Cleared. Reboot ESP</div>';\n//         break;\n//     default: result[7] = msg;;\n//         msg.payload = \"ws failed\";\n// }\n// return result;",
        "outputs": 8,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "409fab1c6bf3bd97"
            ],
            [
                "952dc4b717bf2124"
            ],
            [
                "19bfa9706260c834"
            ],
            [
                "1e34c19d468c41e9"
            ],
            [
                "25109779614fcc36"
            ],
            [
                "98c480a603ae64ac"
            ],
            [
                "d46901a0d2fab6f9"
            ],
            [
                "9afab28deb3c948f"
            ]
        ]
    },
    {
        "id": "9afab28deb3c948f",
        "type": "debug",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "debug: ws failed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1380,
        "wires": []
    },
    {
        "id": "b1979aac4e95b2af",
        "type": "ui-switch",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "led",
        "label": "Led",
        "group": "ccd177e6e1aae92d",
        "order": 1,
        "width": 3,
        "height": 0,
        "passthru": true,
        "decouple": false,
        "topic": "gpio/led",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-left",
        "clickableArea": "switch",
        "onvalue": "0",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "1",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "x": 350,
        "y": 380,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "0f3e635564d267e5",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "37492f9f10e66ef3",
        "order": 2,
        "width": 3,
        "height": 1,
        "name": "Time BME",
        "label": "Last reading:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 850,
        "y": 840,
        "wires": []
    },
    {
        "id": "d88741462fe5a579",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init. Debug",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "b4db417f9850d602"
            ]
        ]
    },
    {
        "id": "c515b74f012a3803",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init. LED",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "b1979aac4e95b2af"
            ]
        ]
    },
    {
        "id": "19bfa9706260c834",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Boiler Led",
        "group": "9483ddd57473ae31",
        "order": 3,
        "width": 3,
        "height": "1",
        "label": "Boiler",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "1",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "0",
                "valueType": "num",
                "color": "#575757"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 860,
        "y": 1180,
        "wires": []
    },
    {
        "id": "25109779614fcc36",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "LED Led",
        "group": "9483ddd57473ae31",
        "order": 4,
        "width": 3,
        "height": 0,
        "label": "Led",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#575757"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 860,
        "y": 1260,
        "wires": []
    },
    {
        "id": "1e34c19d468c41e9",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Debug Led",
        "group": "9483ddd57473ae31",
        "order": 5,
        "width": 3,
        "height": "1",
        "label": "Debug",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "1",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "0",
                "valueType": "num",
                "color": "#575757"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 850,
        "y": 1220,
        "wires": []
    },
    {
        "id": "98c480a603ae64ac",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Heater Led",
        "group": "9483ddd57473ae31",
        "order": 2,
        "width": 3,
        "height": 0,
        "label": "Heater",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "1",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "0",
                "valueType": "num",
                "color": "#575757"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 850,
        "y": 1300,
        "wires": []
    },
    {
        "id": "952dc4b717bf2124",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "group": "2bee51758a9ad534",
        "order": 1,
        "width": 2,
        "height": 0,
        "name": "BME Interval feedback",
        "label": "BME Interval (s): ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 820,
        "y": 1140,
        "wires": []
    },
    {
        "id": "6c7e6c2fc8ab58cd",
        "type": "debug",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "/ws out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "819a7b810339db92",
        "type": "link in",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "temp link in",
        "links": [
            "2ce0dede2ca80f70"
        ],
        "x": 595,
        "y": 540,
        "wires": [
            [
                "ba91eba864a7bdcd",
                "0ea18f2f79bcf3c8"
            ]
        ]
    },
    {
        "id": "2ce0dede2ca80f70",
        "type": "link out",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "temp link out",
        "mode": "link",
        "links": [
            "819a7b810339db92"
        ],
        "x": 615,
        "y": 640,
        "wires": []
    },
    {
        "id": "d46901a0d2fab6f9",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "group": "6eb4c34296451018",
        "order": 3,
        "width": 4,
        "height": 0,
        "name": "ESP (client) IP",
        "label": "ESP (client) IP:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 840,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f86406eb7d3704a1",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "6eb4c34296451018",
        "name": "get ESP IP",
        "label": "get ESP IP",
        "order": 4,
        "width": 2,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "espIP",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 220,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "bc3546db21834208",
        "type": "link out",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "read & interval link out",
        "mode": "link",
        "links": [
            "ed9ae5b74626bf48"
        ],
        "x": 395,
        "y": 700,
        "wires": []
    },
    {
        "id": "ed9ae5b74626bf48",
        "type": "link in",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "read & interval link in",
        "links": [
            "bc3546db21834208"
        ],
        "x": 505,
        "y": 440,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "0ea18f2f79bcf3c8",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "2bee51758a9ad534",
        "order": 6,
        "width": 2,
        "height": 0,
        "name": "Temperature",
        "label": "Temperature: ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 710,
        "y": 540,
        "wires": []
    },
    {
        "id": "7f9e9fa6bcde4996",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "37492f9f10e66ef3",
        "name": "BME Read",
        "label": "BME Read",
        "order": 9,
        "width": 6,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "read",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 110,
        "y": 700,
        "wires": [
            [
                "bc3546db21834208"
            ]
        ]
    },
    {
        "id": "5ca63a5b5666aedf",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "6eb4c34296451018",
        "name": "Reset ESP Wifi",
        "label": "Reset Network",
        "order": 2,
        "width": 2,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "button_red",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "num",
        "topic": "wifi",
        "topicType": "str",
        "buttonColor": "rgb(100,0,0)",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 380,
        "y": 100,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "c2dcf9fe2882c26c",
        "type": "ui-template",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "0d83be325c5fd20f",
        "group": "9483ddd57473ae31",
        "page": "",
        "ui": "",
        "name": "Boiler state",
        "order": 8,
        "width": 2,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div :class=\"['box', boxClass]\">\n    {{ msg.topic }}: {{ boxText }}\n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    boxText() {\n      return this.msg.payload == 1 ? \"ON\"\n            : this.msg.payload == 0 ? \"OFF\"\n            : \"Â¿--?\";\n    },\n    boxClass() {\n      return this.msg.payload == 1 ? \"boxOn\"\n            : this.msg.payload == 0 ? \"boxOff\"\n            : \"boxUnknown\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box {\n  width: 150px;\n  height: 45px;\n  color: white;\n  font-size: 18px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 15px;\n  background-color: grey; /* Default background */\n}\n\n.boxOn { background-color: #0A5A78; }   /* Blue */\n.boxOff { background-color: #575757; }  /* Grey */\n.boxUnknown { background-color: lightgrey; }  /* Default lightgrey */\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "107dbd27acb366e1",
        "type": "ui-template",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "0d83be325c5fd20f",
        "group": "9483ddd57473ae31",
        "page": "",
        "ui": "",
        "name": "Heater state",
        "order": 9,
        "width": 2,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div :class=\"['box', boxClass]\">\n    {{ msg.topic }}: {{ boxText }}\n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    boxText() {\n      return this.msg.payload == 1 ? \"ON\"\n            : this.msg.payload == 0 ? \"OFF\"\n            : \"boxUnknown\";\n    },\n    boxClass() {\n      return this.msg.payload == 1 ? \"boxOn\"\n            : this.msg.payload == 0 ? \"boxOff\"\n            : \"boxUnknown\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box {\n  width: 150px;\n  height: 45px;\n  color: white;\n  font-size: 18px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 15px;\n  background-color: grey; /* Default background */\n}\n\n.boxOn { background-color: #0A5A78; }   /* Blue */\n.boxOff { background-color: #575757; }  /* Grey */\n.boxUnknown { background-color: lightgrey; }  /* Default lightgrey */\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "0cdd99357493f9f5",
        "type": "ui-template",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "0d83be325c5fd20f",
        "group": "9483ddd57473ae31",
        "page": "",
        "ui": "",
        "name": "LED state",
        "order": 7,
        "width": 2,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div :class=\"['box', boxClass]\">\n    {{ msg.topic }}: {{ boxText }}\n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    boxText() {\n      return this.msg.payload == 0 ? \"ON\"\n            : this.msg.payload == 1 ? \"OFF\"\n            : \"Â¿--?\";\n    },\n    boxClass() {\n      return this.msg.payload == 0 ? \"boxOn\"\n            : this.msg.payload == 1 ? \"boxOff\"\n            : \"boxUnknown\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box {\n  width: 150px;\n  height: 45px;\n  color: white;\n  font-size: 18px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 15px;\n  background-color: grey; /* Default background */\n}\n\n.boxOn { background-color: #0A5A78; }   /* Blue */\n.boxOff { background-color: #575757; }  /* Grey */\n.boxUnknown { background-color: lightgrey; }  /* Default lightgrey */\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 120,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "a7d7c4eef88baee1",
        "type": "ui-template",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "0d83be325c5fd20f",
        "group": "9483ddd57473ae31",
        "page": "",
        "ui": "",
        "name": "Debug state",
        "order": 6,
        "width": 2,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div :class=\"['box', boxClass]\">\n    {{ msg.topic }}: {{ boxText }}\n  </div>\n</template>\n\n<script>\nexport default {\n  computed: {\n    boxText() {\n      return this.msg.payload == 1 ? \"ON\"\n            : this.msg.payload == 0 ? \"OFF\"\n            : \"Â¿--?\";\n    },\n    boxClass() {\n      return this.msg.payload == 1 ? \"boxOn\"\n            : this.msg.payload == 0 ? \"boxOff\"\n            : \"boxUnknown\";\n    },\n  },\n};\n</script>\n\n<style scoped>\n.box {\n  width: 150px;\n  height: 45px;\n  color: white;\n  font-size: 18px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 15px;\n  background-color: grey; /* Default background */\n}\n\n.boxOn { background-color: #0A5A78; }   /* Blue */\n.boxOff { background-color: #575757; }  /* Grey */\n.boxUnknown { background-color: lightgrey; }  /* Default lightgrey */\n</style>\n",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 110,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "627caa1b5cd3dd83",
        "type": "ui-number-input",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "37492f9f10e66ef3",
        "name": "elevation",
        "label": "Elevation",
        "order": 7,
        "width": 3,
        "height": 0,
        "topic": "elevation",
        "topicType": "str",
        "min": "0",
        "max": "5000",
        "step": "10",
        "tooltip": "Toledo: 529m / Cimanes: 903m",
        "passthru": true,
        "sendOnBlur": false,
        "sendOnEnter": true,
        "className": "",
        "clearable": false,
        "icon": "",
        "iconPosition": "left",
        "iconInnerPosition": "inside",
        "spinner": "default",
        "x": 280,
        "y": 800,
        "wires": [
            [
                "3661b3b2867449f4"
            ]
        ]
    },
    {
        "id": "508756cca5495592",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Init Elevation",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "529",
        "payloadType": "num",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "627caa1b5cd3dd83"
            ]
        ]
    },
    {
        "id": "70c8b7a389fb0976",
        "type": "ui-gauge",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Gauge SLP",
        "group": "37492f9f10e66ef3",
        "order": 5,
        "width": 3,
        "height": 3,
        "gtype": "gauge-half",
        "gstyle": "needle",
        "title": "SLP",
        "units": "mbar",
        "icon": "",
        "prefix": "",
        "suffix": "",
        "segments": [
            {
                "from": "980",
                "color": "#534f4b"
            },
            {
                "from": "1000",
                "color": "#08a612"
            },
            {
                "from": "1020",
                "color": "#58e2fe"
            }
        ],
        "min": "980",
        "max": "1040",
        "sizeThickness": 16,
        "sizeGap": 4,
        "sizeKeyThickness": 8,
        "styleRounded": true,
        "styleGlow": false,
        "className": "",
        "x": 850,
        "y": 760,
        "wires": []
    },
    {
        "id": "60a2aa154f0978cd",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "37492f9f10e66ef3",
        "order": 3,
        "width": 3,
        "height": 0,
        "name": "Press",
        "label": "Local Pres (mbar)",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 870,
        "y": 800,
        "wires": []
    },
    {
        "id": "7f9e7b9d208fc266",
        "type": "ui-notification",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "ui": "77e83d514b9bd6e2",
        "position": "center center",
        "colorDefault": true,
        "color": "#0a5a78",
        "displayTime": "",
        "showCountdown": false,
        "outputs": 1,
        "allowDismiss": true,
        "dismissText": "Close",
        "allowConfirm": true,
        "confirmText": "Confirm",
        "raw": true,
        "className": "",
        "name": "Wifi Reset",
        "x": 850,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "409fab1c6bf3bd97",
        "type": "change",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "'<div style=\"color: #222; background-color: #2e2; padding: 2rem; border-radius: 0.375rem;\">â Wifi Cleared. Reboot ESP for changes to take effect. Connect to ssid: \"ESP WIFI MANAGER\", url: 192.168.4.1 and set new credentials</div>'",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 1100,
        "wires": [
            [
                "7f9e7b9d208fc266"
            ]
        ]
    },
    {
        "id": "3c532dca89ba976c",
        "type": "debug",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "/ws in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 900,
        "wires": []
    },
    {
        "id": "3661b3b2867449f4",
        "type": "function",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Get BME Readings",
        "func": "let msgTemp = null,\n    msgSLP = null,\n    msgPres = null,\n    msgHum = null, \n    msgErr = null, \n    msgTime = null;\n\n// Update variables with topic in context (elevation):\nif (!!msg.topic) { context.set(msg.topic, msg.payload); }\n\n// Update BME readings (msg received with no topic):\nelse { \n    msgTemp = { payload: msg.temp / 10, topic: \"temp\" };\n    msgHum = { payload: msg.hum / 10};\n    msgPres = { payload: msg.pres / 10 };\n    msgErr = { payload: msg.err };\n    msgTime = { payload: new Date().toLocaleString(\"es-ES\") };\n\n    context.set(\"temp\", msg.temp / 10);\n    context.set(\"pres\", msg.pres / 10);\n}\n\nlet T = context.get(\"temp\");\nconst P = context.get(\"pres\");\nconst H = context.get(\"elevation\");\n\nif (T === undefined || P === undefined || H === undefined) {\n    node.warn(\"Missing required inputs. Waiting for all inputs to be available.\");\n    return null; // Don't compute until all data is available\n}\n\n// Calculation of Sea Level Pressure:\n// T = Temperature at station(in K â Kelvin)\n// L = Temperature lapse rate â 0.0065 K / m\n// g = Gravitational acceleration â 9.80665 m / sÂ²\n// M = Molar mass of dry air â 0.0289644 kg / mol\n// R = Universal gas constant â 8.31432 NÂ·m / (molÂ·K)\n// exp = -(g * M)/(R * L)\n\nT += 273.15;\nconst L = 0.0065,\n    exp = -5.257;\n\nmsgSLP = { payload: Math.round(P * Math.pow(1- (L * H) / T, exp)) }\n\nreturn [msgTemp, msgHum, msgSLP, msgPres, msgTime, msgErr ];",
        "outputs": 6,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "42de5b23f94e16ae"
            ],
            [
                "d948828048902b18"
            ],
            [
                "319aac19b602f4f7"
            ],
            [
                "60a2aa154f0978cd"
            ],
            [
                "0f3e635564d267e5",
                "80f5bfca25f4a9f5"
            ],
            [
                "5392cf50f92bb64b",
                "e856bdde1ed1290b"
            ]
        ]
    },
    {
        "id": "c5c4d7b6ec196e16",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "2bee51758a9ad534",
        "name": "BME Read",
        "label": "BME Read",
        "order": 4,
        "width": 2,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "read",
        "topicType": "str",
        "buttonColor": "",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 440,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "725be293e416a567",
        "type": "comment",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Description",
        "info": " 1. ### Process feedback from ESP:\n    - GPIO # and state\n    - BME Interval\n    - Debug\n    - ESP IP\n    - Host IP\n    - BME Health\n",
        "x": 100,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9ff97d9239fe7f76",
        "type": "link out",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "/ws link out",
        "mode": "link",
        "links": [
            "be4ceccd9cb5c6c7"
        ],
        "x": 395,
        "y": 880,
        "wires": []
    },
    {
        "id": "be4ceccd9cb5c6c7",
        "type": "link in",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "/ws link in",
        "links": [
            "9ff97d9239fe7f76"
        ],
        "x": 315,
        "y": 1180,
        "wires": [
            [
                "38145cf2896c124a",
                "3ebd4c01fc21de41"
            ]
        ]
    },
    {
        "id": "bc82cd87126c5652",
        "type": "change",
        "z": "3dac80766e61d74c",
        "d": true,
        "g": "dd09abb205df0e7f",
        "name": "Reading time",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$moment().format(\"DD/MM HH:mm:ss\")",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "5392cf50f92bb64b",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "BME Status",
        "group": "37492f9f10e66ef3",
        "order": 1,
        "width": 3,
        "height": 0,
        "label": "BME Status",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#575757"
            },
            {
                "value": "2",
                "valueType": "num",
                "color": "#800000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 850,
        "y": 920,
        "wires": []
    },
    {
        "id": "e856bdde1ed1290b",
        "type": "link out",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "bme OK link out",
        "mode": "link",
        "links": [
            "156db787f766f496"
        ],
        "x": 705,
        "y": 960,
        "wires": []
    },
    {
        "id": "156db787f766f496",
        "type": "link in",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "BME OK link in",
        "links": [
            "e856bdde1ed1290b"
        ],
        "x": 725,
        "y": 1060,
        "wires": [
            [
                "2c2c19fb7f3e2120"
            ]
        ]
    },
    {
        "id": "80f5bfca25f4a9f5",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "2bee51758a9ad534",
        "order": 3,
        "width": 2,
        "height": 0,
        "name": "Time console",
        "label": "Last reading:  ",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 850,
        "y": 880,
        "wires": []
    },
    {
        "id": "f8c0702143969d9f",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Init. ESP IP",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "f86406eb7d3704a1"
            ]
        ]
    },
    {
        "id": "3ebd4c01fc21de41",
        "type": "switch",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Identify topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "wifi",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "interval",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "boiler",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "debug",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "led",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "heater",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "espIP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 8,
        "x": 430,
        "y": 1180,
        "wires": [
            [
                "409fab1c6bf3bd97"
            ],
            [
                "952dc4b717bf2124"
            ],
            [
                "19bfa9706260c834"
            ],
            [
                "1e34c19d468c41e9"
            ],
            [
                "25109779614fcc36"
            ],
            [
                "98c480a603ae64ac"
            ],
            [
                "d46901a0d2fab6f9"
            ],
            [
                "9afab28deb3c948f"
            ]
        ]
    },
    {
        "id": "2c2c19fb7f3e2120",
        "type": "ui-led",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "BME Status",
        "group": "9483ddd57473ae31",
        "order": 1,
        "width": null,
        "height": 0,
        "label": "BME Status",
        "labelPlacement": "right",
        "labelAlignment": "flex-start",
        "states": [
            {
                "value": "0",
                "valueType": "num",
                "color": "#0a5a78"
            },
            {
                "value": "1",
                "valueType": "num",
                "color": "#575757"
            },
            {
                "value": "2",
                "valueType": "num",
                "color": "#800000"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "square",
        "showBorder": false,
        "showGlow": false,
        "x": 850,
        "y": 1060,
        "wires": []
    },
    {
        "id": "a4dd09075453160a",
        "type": "ui-button",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "ccd177e6e1aae92d",
        "name": "OTA update",
        "label": "OTA update",
        "order": 3,
        "width": 3,
        "height": 0,
        "emulateClick": true,
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "button_red",
        "icon": "",
        "iconPosition": "left",
        "payload": "",
        "payloadType": "str",
        "topic": "OTA",
        "topicType": "str",
        "buttonColor": "rgb(100,0,0)",
        "textColor": "",
        "iconColor": "",
        "enableClick": true,
        "enablePointerdown": false,
        "pointerdownPayload": "",
        "pointerdownPayloadType": "str",
        "enablePointerup": false,
        "pointerupPayload": "",
        "pointerupPayloadType": "str",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "6b62d61d692b112a"
            ]
        ]
    },
    {
        "id": "8de8cb3c28cee10d",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "Init BME status",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "6",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 540,
        "y": 960,
        "wires": [
            [
                "5392cf50f92bb64b",
                "e856bdde1ed1290b"
            ]
        ]
    },
    {
        "id": "cd50e58b871af65f",
        "type": "ui-slide-confirm",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "6eb4c34296451018",
        "name": "Unlock Wifi Reset",
        "label": "Unlock",
        "order": 5,
        "width": 3,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "sliderHeight": "30",
        "textSize": "18",
        "iconSuccess": "mdi-check",
        "text": "Unlock",
        "successText": "Buttons unlocked",
        "circle": true,
        "animate": false,
        "timeout": 10,
        "controlledWidgets": [
            "5ca63a5b5666aedf"
        ],
        "x": 190,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cbf5c5d18570a5f2",
        "type": "ui-slide-confirm",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "group": "ccd177e6e1aae92d",
        "name": "Unlock ESP",
        "label": "Unlock",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "sliderHeight": "30",
        "textSize": "18",
        "iconSuccess": "mdi-check",
        "text": "Unlock",
        "successText": "Buttons unlocked",
        "circle": true,
        "animate": false,
        "timeout": 10,
        "controlledWidgets": [
            "9f71bf27125dbd78",
            "a4dd09075453160a"
        ],
        "x": 210,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "6b62d61d692b112a",
        "type": "function",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "Clean object",
        "func": "// Convert numbers to Strings:\nmsg.payload = String(msg.payload);\n\n// Clean msg with only payload and topic\nreturn { payload: msg.payload, topic: msg.topic }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 280,
        "wires": [
            [
                "ad3e1c6852897a8a",
                "6c7e6c2fc8ab58cd"
            ]
        ]
    },
    {
        "id": "fb4745b8a6fa5966",
        "type": "inject",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Trigger on start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 1,
        "topic": "",
        "x": 140,
        "y": 1420,
        "wires": [
            [
                "55f6fda16ba96217"
            ]
        ]
    },
    {
        "id": "55f6fda16ba96217",
        "type": "function",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "name": "Get Local IP",
        "func": "// Get all the network interfaces on the system:\nconst interfaces = os.networkInterfaces();\nlet localIP = '';\n\nconst preferredInterfaces = ['Wi-Fi', 'wlan0', 'eth0', 'Ethernet'];\n\nfor (const name of preferredInterfaces.concat(Object.keys(interfaces))) {\n    const ifaceList = interfaces[name];\n    if (!ifaceList) continue;\n    \n    for (const iface of ifaceList) {\n        if (iface.family === 'IPv4' && !iface.internal) {\n            localIP = iface.address;\n            break;\n        }\n    }\n    if (localIP) break;\n}\n\nmsg.topic = \"localIP\";\nmsg.payload = localIP || \"Not found\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 410,
        "y": 1420,
        "wires": [
            [
                "c05b554813adb4a2"
            ]
        ]
    },
    {
        "id": "c05b554813adb4a2",
        "type": "ui-text",
        "z": "3dac80766e61d74c",
        "g": "0d83be325c5fd20f",
        "group": "6eb4c34296451018",
        "order": 1,
        "width": 4,
        "height": 0,
        "name": "Host IP",
        "label": "Node Red (host) IP:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#717171",
        "wrapText": false,
        "className": "",
        "x": 860,
        "y": 1420,
        "wires": []
    },
    {
        "id": "c84973a3cc806c76",
        "type": "link out",
        "z": "3dac80766e61d74c",
        "g": "6667f11d73617129",
        "name": "heater link out",
        "mode": "link",
        "links": [
            "44d7fdee5b46f265"
        ],
        "x": 815,
        "y": 500,
        "wires": []
    },
    {
        "id": "44d7fdee5b46f265",
        "type": "link in",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "name": "hater link in",
        "links": [
            "c84973a3cc806c76"
        ],
        "x": 745,
        "y": 640,
        "wires": [
            [
                "5d1ae5a93dee578b"
            ]
        ]
    },
    {
        "id": "5d1ae5a93dee578b",
        "type": "ui-chart",
        "z": "3dac80766e61d74c",
        "g": "dd09abb205df0e7f",
        "group": "23069d27834e3b9a",
        "name": "Chart Temp",
        "label": "BME - Temperature (ÂºC)",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "5",
        "ymax": "35",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "3",
        "showLegend": true,
        "removeOlder": "240",
        "removeOlderUnit": "3600",
        "removeOlderPoints": "1000",
        "colors": [
            "#2ca02c",
            "#2c99dd",
            "#c80000",
            "#ff7f0e",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 850,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "8dbef215b4efa8a7",
        "type": "websocket-listener",
        "path": "/ws",
        "wholemsg": "true"
    },
    {
        "id": "5532451b39d92101",
        "type": "ui-group",
        "name": "Chart Hum",
        "page": "d299253f8b2f883b",
        "width": 6,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "08f2c61ccabaf911",
        "type": "ui-group",
        "name": "Chart Press",
        "page": "d299253f8b2f883b",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "37492f9f10e66ef3",
        "type": "ui-group",
        "name": "Actual readings",
        "page": "d299253f8b2f883b",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "ccd177e6e1aae92d",
        "type": "ui-group",
        "name": "ESP",
        "page": "bde350f197f7a982",
        "width": 3,
        "height": 1,
        "order": 4,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "2bee51758a9ad534",
        "type": "ui-group",
        "name": "Thermostat",
        "page": "bde350f197f7a982",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "9483ddd57473ae31",
        "type": "ui-group",
        "name": "Feedback LED's",
        "page": "bde350f197f7a982",
        "width": 3,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "6eb4c34296451018",
        "type": "ui-group",
        "name": "Connections",
        "page": "bde350f197f7a982",
        "width": 6,
        "height": 1,
        "order": 3,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "77e83d514b9bd6e2",
        "type": "ui-base",
        "name": "NoderedUI",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": true,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "23069d27834e3b9a",
        "type": "ui-group",
        "name": "Chart Temp",
        "page": "d299253f8b2f883b",
        "width": 6,
        "height": 1,
        "order": 2,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "d299253f8b2f883b",
        "type": "ui-page",
        "name": "WS BME",
        "ui": "77e83d514b9bd6e2",
        "path": "/WS_bme",
        "icon": "home",
        "layout": "grid",
        "theme": "f633910aef2e9d8b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 4,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "bde350f197f7a982",
        "type": "ui-page",
        "name": "WS Console",
        "ui": "77e83d514b9bd6e2",
        "path": "/WS_console",
        "icon": "home",
        "layout": "grid",
        "theme": "f633910aef2e9d8b",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 5,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "f633910aef2e9d8b",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#232323",
            "primary": "#0a5a78",
            "bgPage": "#000000",
            "groupBg": "#afafaf",
            "groupOutline": "#0d0d0d"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    }
]